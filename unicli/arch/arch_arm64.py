from unicli.arch.arch import ArchSpec, Arch
from unicorn.arm64_const import *

g_general_regs_arm64 = [
    UC_ARM64_REG_X0, UC_ARM64_REG_X1, UC_ARM64_REG_X2, UC_ARM64_REG_X3,
    UC_ARM64_REG_X4, UC_ARM64_REG_X5, UC_ARM64_REG_X6, UC_ARM64_REG_X7,
    UC_ARM64_REG_X8, UC_ARM64_REG_X9, UC_ARM64_REG_X8, UC_ARM64_REG_X9,
    UC_ARM64_REG_X10, UC_ARM64_REG_X11, UC_ARM64_REG_X12, UC_ARM64_REG_X13,
    UC_ARM64_REG_X14, UC_ARM64_REG_X15, UC_ARM64_REG_X16, UC_ARM64_REG_X17,
    UC_ARM64_REG_X18, UC_ARM64_REG_X19, UC_ARM64_REG_X20, UC_ARM64_REG_X21,
    UC_ARM64_REG_X22, UC_ARM64_REG_X23, UC_ARM64_REG_X24, UC_ARM64_REG_X25,
    UC_ARM64_REG_X26, UC_ARM64_REG_X27, UC_ARM64_REG_X28, UC_ARM64_REG_X29,
    UC_ARM64_REG_X30, UC_ARM64_REG_SP, UC_ARM64_REG_PC
]

g_general_regs_arm64_id_to_name = {
    UC_ARM64_REG_NZCV: "NZCV", UC_ARM64_REG_SP: "SP", UC_ARM64_REG_WSP: "WSP", UC_ARM64_REG_WZR: "WZR",
    UC_ARM64_REG_XZR: "XZR",

    UC_ARM64_REG_B0: "B0", UC_ARM64_REG_B1: "B1", UC_ARM64_REG_B2: "B2", UC_ARM64_REG_B3: "B3",
    UC_ARM64_REG_B4: "B4", UC_ARM64_REG_B5: "B5", UC_ARM64_REG_B6: "B6", UC_ARM64_REG_B7: "B7",
    UC_ARM64_REG_B8: "B8", UC_ARM64_REG_B9: "B9", UC_ARM64_REG_B10: "B10", UC_ARM64_REG_B11: "B11",
    UC_ARM64_REG_B12: "B12", UC_ARM64_REG_B13: "B13", UC_ARM64_REG_B14: "B14", UC_ARM64_REG_B15: "B15",
    UC_ARM64_REG_B16: "B16", UC_ARM64_REG_B17: "B17", UC_ARM64_REG_B18: "B18", UC_ARM64_REG_B19: "B19",
    UC_ARM64_REG_B20: "B20", UC_ARM64_REG_B21: "B21", UC_ARM64_REG_B22: "B22", UC_ARM64_REG_B23: "B23",
    UC_ARM64_REG_B24: "B24", UC_ARM64_REG_B25: "B25", UC_ARM64_REG_B26: "B26", UC_ARM64_REG_B27: "B27",
    UC_ARM64_REG_B28: "B28", UC_ARM64_REG_B29: "FP", UC_ARM64_REG_B30: "LR", UC_ARM64_REG_B31: "B31",

    UC_ARM64_REG_D0: "D0", UC_ARM64_REG_D1: "D1", UC_ARM64_REG_D2: "D2", UC_ARM64_REG_D3: "D3",
    UC_ARM64_REG_D4: "D4", UC_ARM64_REG_D5: "D5", UC_ARM64_REG_D6: "D6", UC_ARM64_REG_D7: "D7",
    UC_ARM64_REG_D8: "D8", UC_ARM64_REG_D9: "D9", UC_ARM64_REG_D10: "D10", UC_ARM64_REG_D11: "D11",
    UC_ARM64_REG_D12: "D12", UC_ARM64_REG_D13: "D13", UC_ARM64_REG_D14: "D14", UC_ARM64_REG_D15: "D15",
    UC_ARM64_REG_D16: "D16", UC_ARM64_REG_D17: "D17", UC_ARM64_REG_D18: "D18", UC_ARM64_REG_D19: "D19",
    UC_ARM64_REG_D20: "D20", UC_ARM64_REG_D21: "D21", UC_ARM64_REG_D22: "D22", UC_ARM64_REG_D23: "D23",
    UC_ARM64_REG_D24: "D24", UC_ARM64_REG_D25: "D25", UC_ARM64_REG_D26: "D26", UC_ARM64_REG_D27: "D27",
    UC_ARM64_REG_D28: "D28", UC_ARM64_REG_D29: "FP", UC_ARM64_REG_D30: "LR", UC_ARM64_REG_D31: "D31",

    UC_ARM64_REG_H0: "H0", UC_ARM64_REG_H1: "H1", UC_ARM64_REG_H2: "H2", UC_ARM64_REG_H3: "H3",
    UC_ARM64_REG_H4: "H4", UC_ARM64_REG_H5: "H5", UC_ARM64_REG_H6: "H6", UC_ARM64_REG_H7: "H7",
    UC_ARM64_REG_H8: "H8", UC_ARM64_REG_H9: "H9", UC_ARM64_REG_H10: "H10", UC_ARM64_REG_H11: "H11",
    UC_ARM64_REG_H12: "H12", UC_ARM64_REG_H13: "H13", UC_ARM64_REG_H14: "H14", UC_ARM64_REG_H15: "H15",
    UC_ARM64_REG_H16: "H16", UC_ARM64_REG_H17: "H17", UC_ARM64_REG_H18: "H18", UC_ARM64_REG_H19: "H19",
    UC_ARM64_REG_H20: "H20", UC_ARM64_REG_H21: "H21", UC_ARM64_REG_H22: "H22", UC_ARM64_REG_H23: "H23",
    UC_ARM64_REG_H24: "H24", UC_ARM64_REG_H25: "H25", UC_ARM64_REG_H26: "H26", UC_ARM64_REG_H27: "H27",
    UC_ARM64_REG_H28: "H28", UC_ARM64_REG_H29: "FP", UC_ARM64_REG_H30: "LR", UC_ARM64_REG_H31: "H31",

    UC_ARM64_REG_Q0: "Q0", UC_ARM64_REG_Q1: "Q1", UC_ARM64_REG_Q2: "Q2", UC_ARM64_REG_Q3: "Q3",
    UC_ARM64_REG_Q4: "Q4", UC_ARM64_REG_Q5: "Q5", UC_ARM64_REG_Q6: "Q6", UC_ARM64_REG_Q7: "Q7",
    UC_ARM64_REG_Q8: "Q8", UC_ARM64_REG_Q9: "Q9", UC_ARM64_REG_Q10: "Q10", UC_ARM64_REG_Q11: "Q11",
    UC_ARM64_REG_Q12: "Q12", UC_ARM64_REG_Q13: "Q13", UC_ARM64_REG_Q14: "Q14", UC_ARM64_REG_Q15: "Q15",
    UC_ARM64_REG_Q16: "Q16", UC_ARM64_REG_Q17: "Q17", UC_ARM64_REG_Q18: "Q18", UC_ARM64_REG_Q19: "Q19",
    UC_ARM64_REG_Q20: "Q20", UC_ARM64_REG_Q21: "Q21", UC_ARM64_REG_Q22: "Q22", UC_ARM64_REG_Q23: "Q23",
    UC_ARM64_REG_Q24: "Q24", UC_ARM64_REG_Q25: "Q25", UC_ARM64_REG_Q26: "Q26", UC_ARM64_REG_Q27: "Q27",
    UC_ARM64_REG_Q28: "Q28", UC_ARM64_REG_Q29: "FP", UC_ARM64_REG_Q30: "LR", UC_ARM64_REG_Q31: "Q31",

    UC_ARM64_REG_S0: "S0", UC_ARM64_REG_S1: "S1", UC_ARM64_REG_S2: "S2", UC_ARM64_REG_S3: "S3",
    UC_ARM64_REG_S4: "S4", UC_ARM64_REG_S5: "S5", UC_ARM64_REG_S6: "S6", UC_ARM64_REG_S7: "S7",
    UC_ARM64_REG_S8: "S8", UC_ARM64_REG_S9: "S9", UC_ARM64_REG_S10: "S10", UC_ARM64_REG_S11: "S11",
    UC_ARM64_REG_S12: "S12", UC_ARM64_REG_S13: "S13", UC_ARM64_REG_S14: "S14", UC_ARM64_REG_S15: "S15",
    UC_ARM64_REG_S16: "S16", UC_ARM64_REG_S17: "S17", UC_ARM64_REG_S18: "S18", UC_ARM64_REG_S19: "S19",
    UC_ARM64_REG_S20: "S20", UC_ARM64_REG_S21: "S21", UC_ARM64_REG_S22: "S22", UC_ARM64_REG_S23: "S23",
    UC_ARM64_REG_S24: "S24", UC_ARM64_REG_S25: "S25", UC_ARM64_REG_S26: "S26", UC_ARM64_REG_S27: "S27",
    UC_ARM64_REG_S28: "S28", UC_ARM64_REG_S29: "FP", UC_ARM64_REG_S30: "LR", UC_ARM64_REG_S31: "S31",

    UC_ARM64_REG_W0: "W0", UC_ARM64_REG_W1: "W1", UC_ARM64_REG_W2: "W2", UC_ARM64_REG_W3: "W3",
    UC_ARM64_REG_W4: "W4", UC_ARM64_REG_W5: "W5", UC_ARM64_REG_W6: "W6", UC_ARM64_REG_W7: "W7",
    UC_ARM64_REG_W8: "W8", UC_ARM64_REG_W9: "W9", UC_ARM64_REG_W10: "W10", UC_ARM64_REG_W11: "W11",
    UC_ARM64_REG_W12: "W12", UC_ARM64_REG_W13: "W13", UC_ARM64_REG_W14: "W14", UC_ARM64_REG_W15: "W15",
    UC_ARM64_REG_W16: "W16", UC_ARM64_REG_W17: "W17", UC_ARM64_REG_W18: "W18", UC_ARM64_REG_W19: "W19",
    UC_ARM64_REG_W20: "W20", UC_ARM64_REG_W21: "W21", UC_ARM64_REG_W22: "W22", UC_ARM64_REG_W23: "W23",
    UC_ARM64_REG_W24: "W24", UC_ARM64_REG_W25: "W25", UC_ARM64_REG_W26: "W26", UC_ARM64_REG_W27: "W27",
    UC_ARM64_REG_W28: "W28", UC_ARM64_REG_W29: "FP", UC_ARM64_REG_W30: "LR",

    UC_ARM64_REG_X0: "X0", UC_ARM64_REG_X1: "X1", UC_ARM64_REG_X2: "X2", UC_ARM64_REG_X3: "X3",
    UC_ARM64_REG_X4: "X4", UC_ARM64_REG_X5: "X5", UC_ARM64_REG_X6: "X6", UC_ARM64_REG_X7: "X7",
    UC_ARM64_REG_X8: "X8", UC_ARM64_REG_X9: "X9", UC_ARM64_REG_X10: "X10", UC_ARM64_REG_X11: "X11",
    UC_ARM64_REG_X12: "X12", UC_ARM64_REG_X13: "X13", UC_ARM64_REG_X14: "X14", UC_ARM64_REG_X15: "X15",
    UC_ARM64_REG_X16: "X16", UC_ARM64_REG_X17: "X17", UC_ARM64_REG_X18: "X18", UC_ARM64_REG_X19: "X19",
    UC_ARM64_REG_X20: "X20", UC_ARM64_REG_X21: "X21", UC_ARM64_REG_X22: "X22", UC_ARM64_REG_X23: "X23",
    UC_ARM64_REG_X24: "X24", UC_ARM64_REG_X25: "X25", UC_ARM64_REG_X26: "X26", UC_ARM64_REG_X27: "X27",
    UC_ARM64_REG_X28: "X28", UC_ARM64_REG_X29: "FP", UC_ARM64_REG_X30: "LR",

    UC_ARM64_REG_V0: "V0", UC_ARM64_REG_V1: "V1", UC_ARM64_REG_V2: "V2", UC_ARM64_REG_V3: "V3",
    UC_ARM64_REG_V4: "V4", UC_ARM64_REG_V5: "V5", UC_ARM64_REG_V6: "V6", UC_ARM64_REG_V7: "V7",
    UC_ARM64_REG_V8: "V8", UC_ARM64_REG_V9: "V9", UC_ARM64_REG_V10: "V10", UC_ARM64_REG_V11: "V11",
    UC_ARM64_REG_V12: "V12", UC_ARM64_REG_V13: "V13", UC_ARM64_REG_V14: "V14", UC_ARM64_REG_V15: "V15",
    UC_ARM64_REG_V16: "V16", UC_ARM64_REG_V17: "V17", UC_ARM64_REG_V18: "V18", UC_ARM64_REG_V19: "V19",
    UC_ARM64_REG_V20: "V20", UC_ARM64_REG_V21: "V21", UC_ARM64_REG_V22: "V22", UC_ARM64_REG_V23: "V23",
    UC_ARM64_REG_V24: "V24", UC_ARM64_REG_V25: "V25", UC_ARM64_REG_V26: "V26", UC_ARM64_REG_V27: "V27",
    UC_ARM64_REG_V28: "V28", UC_ARM64_REG_V29: "FP", UC_ARM64_REG_V30: "LR", UC_ARM64_REG_V31: "V31",

    UC_ARM64_REG_PC: "PC",
    UC_ARM64_REG_CPACR_EL1: "CPACR_EL1",
    UC_ARM64_REG_TPIDR_EL0: "TPIDR_EL0",
    UC_ARM64_REG_TPIDRRO_EL0: "TPIDRRO_EL0",
    UC_ARM64_REG_TPIDR_EL1: "TPIDR_EL1",
    UC_ARM64_REG_PSTATE: "PSTATE",

    # TODO:
    UC_ARM64_REG_CP_REG: "CP_REG"
}


class ArchSpecArm64(ArchSpec):

    def arch(self) -> Arch:
        return Arch.ARCH_ARM64

    def address_size(self) -> int:
        return 8

    def format_address(self, address: int, uppercase: bool = False) -> str:
        if uppercase:
            return "0x{:0>10X}".format(address)
        else:
            return "0x{:0>10x}".format(address)

    def format_number(self, reg_val: int) -> str:
        return "0x{:0>16x}".format(reg_val)

    def get_reg_num(self, reg_name: str, def_val: int) -> int:
        reg_name = reg_name.upper()
        if reg_name == "FP":
            return UC_ARM64_REG_X29
        elif reg_name == "LR":
            return UC_ARM64_REG_X30
        tmp = "UC_ARM64_REG_" + reg_name
        try:
            reg_id = eval(tmp)
            return reg_id
        except:
            return def_val

    def get_reg_name(self, reg_number: int, def_val: str) -> str:
        if reg_number in g_general_regs_arm64_id_to_name:
            return g_general_regs_arm64_id_to_name[reg_number]
        return def_val

    def get_all_reg_num(self) -> (list[int], str):
        return g_general_regs_arm64

    def get_instruction_pointer_reg_num(self) -> int:
        return UC_ARM64_REG_PC

